import { Lead, ListLeadsRequestParams } from './Leads';
import { Person } from './People';
import { Company, ContactType } from './Companies';
import { Opportunity } from './Opportunity';
import { Project } from './Projects';
import { Task } from './Tasks';
import { Activity } from './Activities';
import { Subscription, Relation, Connection, CustomActivityType, CustomField, ListCustomFieldRequestParams, DeleteResponse } from './CustomFields';
interface CopperHeaders {
    "X-PW-AccessToken": string;
    "X-PW-Application": string;
    "X-PW-UserEmail": string;
    "Content-Type": string;
}
export declare class Copper {
    headers: CopperHeaders;
    constructor(access_token: string, email: string);
    copperRequest<T>(url: string, method: string, params?: any): Promise<T>;
    createLead(lead: Lead): Promise<Lead>;
    createLeads(leads: Lead[]): Promise<Lead[]>;
    fetchLeadById(id: number): Promise<Lead>;
    listLeads(params?: ListLeadsRequestParams): Promise<Lead[]>;
    listAllLeads(): Promise<Lead[]>;
    updateLead(id: number, lead: any): Promise<Lead>;
    upsertLead(lead: Lead, match: any): Promise<Lead>;
    deleteLead(id: number): Promise<DeleteResponse>;
    deleteLeads(ids: number[]): Promise<DeleteResponse[]>;
    convertLead(id: number, details: any): Promise<any>;
    createPerson(person: Person): Promise<Person>;
    updatePerson(id: number, field: any): Promise<Person>;
    deletePerson(id: number): Promise<DeleteResponse>;
    listPeople(params?: any): Promise<Person[]>;
    listAllPeople(): Promise<Person[]>;
    listPersonActivities(id: number, params?: any): Promise<any[]>;
    fetchPersonById(id: number): Promise<Person>;
    fetchPersonByEmail(email: string): Promise<Person>;
    fetchCompanyById(id: number): Promise<Company>;
    createCompany(company: Company): Promise<Company>;
    updateCompany(id: number, field: Company): Promise<Company>;
    deleteCompany(id: number): Promise<DeleteResponse>;
    listCompanies(params?: any): Promise<Company[]>;
    listAllCompanies(): Promise<Company[]>;
    listCompanyActivities(id: number, params?: any): Promise<any[]>;
    listContactTypes(): Promise<ContactType[]>;
    fetchOpportunityById(id: number): Promise<Opportunity>;
    createOpportunity(opportunity: Opportunity): Promise<Opportunity>;
    updateOpportunity(id: number, opportunity: Opportunity): Promise<Opportunity>;
    deleteOpportunity(id: number): Promise<DeleteResponse>;
    listOpportunities(params?: any): Promise<Opportunity[]>;
    listAllOpportunities(): Promise<Opportunity[]>;
    listCustomerSources(): Promise<any[]>;
    listLossReasons(): Promise<any[]>;
    listPipelines(): Promise<any[]>;
    listPipelineStages(): Promise<any[]>;
    listStagesInPipeline(id: number): Promise<any[]>;
    fetchProjectById(id: number): Promise<Project>;
    createProject(project: Project): Promise<Project>;
    updateProject(id: number, field: Project): Promise<Project>;
    deleteProject(id: number): Promise<DeleteResponse>;
    listProjects(params?: any): Promise<Project[]>;
    fetchTaskById(id: number): Promise<Task>;
    createTask(task: Task): Promise<Task>;
    updateTask(id: number, field: Task): Promise<Task>;
    deleteTask(id: number): Promise<DeleteResponse>;
    listTasks(params?: any): Promise<Task[]>;
    listAllTasks(): Promise<Task[]>;
    fetchActivityById(id: number): Promise<Activity>;
    createActivity(activity: Activity): Promise<Activity>;
    updateActivity(id: number, field: Activity): Promise<Activity>;
    deleteActivity(id: number): Promise<DeleteResponse>;
    listActivities(params?: any): Promise<Activity[]>;
    listActivityTypes(): Promise<Activity[]>;
    getCustomActivityType(id: number): Promise<CustomActivityType>;
    listCustomActivityTypes(): Promise<CustomActivityType[]>;
    updateCustomActivityType(id: number, params?: any): Promise<CustomActivityType>;
    createCustomActivityType(params: CustomActivityType): Promise<CustomActivityType>;
    createCustomField(field: CustomField): Promise<CustomField>;
    updateCustomField(id: number, field: CustomField): Promise<CustomField>;
    deleteCustomField(id: number): Promise<DeleteResponse>;
    listCustomFields(params?: ListCustomFieldRequestParams): Promise<CustomField[]>;
    fetchCustomFieldById(id: number): Promise<CustomField>;
    deleteConnection(id: number): Promise<DeleteResponse>;
    listConnectionsByEntity(source_id: number, source_type: string): Promise<Connection[]>;
    listConnectionsByEntityWithCustomField(source_id: number, source_type: string, custom_field_definition_id: number): Promise<Connection[]>;
    createConnection(params: Connection): Promise<Connection>;
    listRelatedRecords(entity: string, entity_id: number): Promise<Relation[]>;
    listRelatedRecordsByType(entity: string, entity_id: number, related_entity_name: string): Promise<Relation[]>;
    createRelation(entity: string, entity_id: number, resource: any): Promise<Relation>;
    deleteRelation(entity: string, entity_id: number, resource: any): Promise<any>;
    createSubscription(params: Subscription): Promise<Subscription>;
    deleteSubscription(id: number): Promise<any>;
    listSubscriptions(): Promise<Subscription[]>;
    fetchSubscriptionById(id: number): Promise<Subscription>;
    nameToCustomFieldId(name: string, fields: CustomField[]): number;
    customFieldValueFromId(record: any, id: number): any;
    customFieldValueFromName(record: any, name: string, all_fields: CustomField[]): any;
}
export {};
